#include "Card.h"

const CardInfo StandardCards[] = 
{
  {CARD_TYPE_SLASH, CARD_SUIT_CLUB, CARD_POINT_SIX},
  {CARD_TYPE_SLASH, CARD_SUIT_CLUB, CARD_POINT_SEVEN},
  {CARD_TYPE_SLASH, CARD_SUIT_CLUB, CARD_POINT_EIGHT},
  {CARD_TYPE_SLASH, CARD_SUIT_CLUB, CARD_POINT_NINE},
  {CARD_TYPE_SLASH, CARD_SUIT_CLUB, CARD_POINT_TEN},
  {CARD_TYPE_SLASH, CARD_SUIT_CLUB, CARD_POINT_KING},
  {CARD_TYPE_SLASH, CARD_SUIT_SPADE, CARD_POINT_SEVEN},
  {CARD_TYPE_SLASH, CARD_SUIT_SPADE, CARD_POINT_EIGHT},
  {CARD_TYPE_SLASH, CARD_SUIT_SPADE, CARD_POINT_EIGHT},
  {CARD_TYPE_SLASH, CARD_SUIT_SPADE, CARD_POINT_NINE},
  {CARD_TYPE_SLASH, CARD_SUIT_SPADE, CARD_POINT_NINE},
  {CARD_TYPE_SLASH, CARD_SUIT_SPADE, CARD_POINT_TEN},
  {CARD_TYPE_SLASH, CARD_SUIT_SPADE, CARD_POINT_TEN},
  {CARD_TYPE_SLASH, CARD_SUIT_HEART, CARD_POINT_TEN},
  {CARD_TYPE_SLASH, CARD_SUIT_HEART, CARD_POINT_TEN},
  {CARD_TYPE_SLASH, CARD_SUIT_HEART, CARD_POINT_JACK},
  {CARD_TYPE_SLASH, CARD_SUIT_DIAMOND, CARD_POINT_TWO},
  {CARD_TYPE_SLASH, CARD_SUIT_DIAMOND, CARD_POINT_THREE},
  {CARD_TYPE_SLASH, CARD_SUIT_DIAMOND, CARD_POINT_FOUR},
  {CARD_TYPE_SLASH, CARD_SUIT_DIAMOND, CARD_POINT_FIVE},
  {CARD_TYPE_SLASH, CARD_SUIT_DIAMOND, CARD_POINT_SIX},
  {CARD_TYPE_SLASH, CARD_SUIT_DIAMOND, CARD_POINT_SEVEN},
  {CARD_TYPE_SLASH, CARD_SUIT_DIAMOND, CARD_POINT_EIGHT},
  {CARD_TYPE_SLASH, CARD_SUIT_DIAMOND, CARD_POINT_EIGHT},
  {CARD_TYPE_SLASH, CARD_SUIT_DIAMOND, CARD_POINT_NINE},
  {CARD_TYPE_SLASH, CARD_SUIT_DIAMOND, CARD_POINT_NINE},
  {CARD_TYPE_SLASH, CARD_SUIT_DIAMOND, CARD_POINT_TEN},
  {CARD_TYPE_SLASH, CARD_SUIT_DIAMOND, CARD_POINT_TEN},
  {CARD_TYPE_SLASH, CARD_SUIT_DIAMOND, CARD_POINT_JACK},
  {CARD_TYPE_SLASH, CARD_SUIT_DIAMOND, CARD_POINT_JACK},
  {CARD_TYPE_JINK, CARD_SUIT_CLUB, CARD_POINT_TWO},
  {CARD_TYPE_JINK, CARD_SUIT_CLUB, CARD_POINT_TWO},
  {CARD_TYPE_JINK, CARD_SUIT_CLUB, CARD_POINT_THREE},
  {CARD_TYPE_JINK, CARD_SUIT_CLUB, CARD_POINT_FOUR},
  {CARD_TYPE_JINK, CARD_SUIT_CLUB, CARD_POINT_FIVE},
  {CARD_TYPE_JINK, CARD_SUIT_CLUB, CARD_POINT_SIX},
  {CARD_TYPE_JINK, CARD_SUIT_CLUB, CARD_POINT_SEVEN},
  {CARD_TYPE_JINK, CARD_SUIT_CLUB, CARD_POINT_EIGHT},
  {CARD_TYPE_JINK, CARD_SUIT_CLUB, CARD_POINT_NINE},
  {CARD_TYPE_JINK, CARD_SUIT_CLUB, CARD_POINT_TEN},
  {CARD_TYPE_JINK, CARD_SUIT_CLUB, CARD_POINT_JACK},
  {CARD_TYPE_JINK, CARD_SUIT_CLUB, CARD_POINT_JACK},
  {CARD_TYPE_JINK, CARD_SUIT_HEART, CARD_POINT_TWO},
  {CARD_TYPE_JINK, CARD_SUIT_HEART, CARD_POINT_TWO},
  {CARD_TYPE_JINK, CARD_SUIT_HEART, CARD_POINT_KING},
  {CARD_TYPE_PEACH, CARD_SUIT_CLUB, CARD_POINT_QUENE},
  {CARD_TYPE_PEACH, CARD_SUIT_HEART, CARD_POINT_THREE},
  {CARD_TYPE_PEACH, CARD_SUIT_HEART, CARD_POINT_FOUR},
  {CARD_TYPE_PEACH, CARD_SUIT_HEART, CARD_POINT_SIX},
  {CARD_TYPE_PEACH, CARD_SUIT_HEART, CARD_POINT_SEVEN},
  {CARD_TYPE_PEACH, CARD_SUIT_HEART, CARD_POINT_EIGHT},
  {CARD_TYPE_PEACH, CARD_SUIT_HEART, CARD_POINT_NINE},
  {CARD_TYPE_PEACH, CARD_SUIT_HEART, CARD_POINT_QUENE},
  {CARD_TYPE_ARCHERY, CARD_SUIT_HEART, CARD_POINT_ONE},
  {CARD_TYPE_ALL_PEACH, CARD_SUIT_HEART, CARD_POINT_ONE},
  {CARD_TYPE_COLLATERAL, CARD_SUIT_DIAMOND, CARD_POINT_QUENE},
  {CARD_TYPE_COLLATERAL, CARD_SUIT_DIAMOND, CARD_POINT_KING},
  {CARD_TYPE_GOOD_HARVEST, CARD_SUIT_HEART, CARD_POINT_THREE},
  {CARD_TYPE_GOOD_HARVEST, CARD_SUIT_HEART, CARD_POINT_FOUR},
  {CARD_TYPE_LIGHTING, CARD_SUIT_SPADE, CARD_POINT_ONE},
  {CARD_TYPE_LIGHTING, CARD_SUIT_HEART, CARD_POINT_QUENE},
  {CARD_TYPE_DUEL, CARD_SUIT_CLUB, CARD_POINT_ONE},
  {CARD_TYPE_DUEL, CARD_SUIT_SPADE, CARD_POINT_ONE},
  {CARD_TYPE_DUEL, CARD_SUIT_DIAMOND, CARD_POINT_ONE},
  {CARD_TYPE_SAVAGE_INVASION, CARD_SUIT_SPADE, CARD_POINT_SEVEN},
  {CARD_TYPE_SAVAGE_INVASION, CARD_SUIT_SPADE, CARD_POINT_KING},
  {CARD_TYPE_SAVAGE_INVASION, CARD_SUIT_DIAMOND, CARD_POINT_SEVEN},
  {CARD_TYPE_FORGET_HOME, CARD_SUIT_SPADE, CARD_POINT_SIX},
  {CARD_TYPE_FORGET_HOME, CARD_SUIT_HEART, CARD_POINT_SIX},
  {CARD_TYPE_FORGET_HOME, CARD_SUIT_DIAMOND, CARD_POINT_SIX},
  {CARD_TYPE_OUT_OF_NOTHING, CARD_SUIT_HEART, CARD_POINT_SEVEN},
  {CARD_TYPE_OUT_OF_NOTHING, CARD_SUIT_HEART, CARD_POINT_EIGHT},
  {CARD_TYPE_OUT_OF_NOTHING, CARD_SUIT_HEART, CARD_POINT_NINE},
  {CARD_TYPE_OUT_OF_NOTHING, CARD_SUIT_HEART, CARD_POINT_JACK},
  {CARD_TYPE_STEAL_SHEEP, CARD_SUIT_CLUB, CARD_POINT_THREE},
  {CARD_TYPE_STEAL_SHEEP, CARD_SUIT_CLUB, CARD_POINT_FOUR},
  {CARD_TYPE_STEAL_SHEEP, CARD_SUIT_SPADE, CARD_POINT_THREE},
  {CARD_TYPE_STEAL_SHEEP, CARD_SUIT_SPADE, CARD_POINT_FOUR},
  {CARD_TYPE_STEAL_SHEEP, CARD_SUIT_SPADE, CARD_POINT_JACK},
  {CARD_TYPE_BURN_BRIDGE, CARD_SUIT_SPADE, CARD_POINT_THREE},
  {CARD_TYPE_BURN_BRIDGE, CARD_SUIT_SPADE, CARD_POINT_FOUR},
  {CARD_TYPE_BURN_BRIDGE, CARD_SUIT_SPADE, CARD_POINT_QUENE},
  {CARD_TYPE_BURN_BRIDGE, CARD_SUIT_HEART, CARD_POINT_QUENE},
  {CARD_TYPE_BURN_BRIDGE, CARD_SUIT_DIAMOND, CARD_POINT_THREE},
  {CARD_TYPE_BURN_BRIDGE, CARD_SUIT_DIAMOND, CARD_POINT_FOUR},
  {CARD_TYPE_INVULNERABLE, CARD_SUIT_SPADE, CARD_POINT_JACK},
  {CARD_TYPE_INVULNERABLE, CARD_SUIT_DIAMOND, CARD_POINT_QUENE},
  {CARD_TYPE_INVULNERABLE, CARD_SUIT_DIAMOND, CARD_POINT_KING},
  {CARD_TYPE_INVULNERABLE, CARD_SUIT_CLUB, CARD_POINT_QUENE},
  {CARD_TYPE_CROSSBOW, CARD_SUIT_CLUB, CARD_POINT_ONE},
  {CARD_TYPE_CROSSBOW, CARD_SUIT_DIAMOND, CARD_POINT_ONE},
  {CARD_TYPE_DOUBLE_SWORD, CARD_SUIT_SPADE, CARD_POINT_TWO},
  {CARD_TYPE_ICE_SWORD, CARD_SUIT_SPADE, CARD_POINT_TWO},
  {CARD_TYPE_QINGGANG_SWORD, CARD_SUIT_SPADE, CARD_POINT_SIX},
  {CARD_TYPE_QINGLONG_SWORD, CARD_SUIT_SPADE, CARD_POINT_FIVE},
  {CARD_TYPE_SNAKE_SPEAR, CARD_SUIT_SPADE, CARD_POINT_QUENE},
  {CARD_TYPE_INTERSECTING_AXES, CARD_SUIT_CLUB, CARD_POINT_FIVE},
  {CARD_TYPE_FANGTIAN_HALBERD, CARD_SUIT_CLUB, CARD_POINT_QUENE},
  {CARD_TYPE_KYLIN_BOW, CARD_SUIT_HEART, CARD_POINT_FIVE},
  {CARD_TYPE_EIGHT_DIAGRAM, CARD_SUIT_SPADE, CARD_POINT_TWO},
  {CARD_TYPE_EIGHT_DIAGRAM, CARD_SUIT_DIAMOND, CARD_POINT_TWO},
  {CARD_TYPE_BENEVOLENT_SHIELD, CARD_SUIT_DIAMOND, CARD_POINT_TWO},
  {CARD_TYPE_RED_HORSE, CARD_SUIT_HEART, CARD_POINT_FIVE},
  {CARD_TYPE_DAWAN_HORSE, CARD_SUIT_SPADE, CARD_POINT_KING},
  {CARD_TYPE_ZIXING_HORSE, CARD_SUIT_CLUB, CARD_POINT_KING},
  {CARD_TYPE_DILU_HORSE, CARD_SUIT_DIAMOND, CARD_POINT_FIVE},
  {CARD_TYPE_JUEYING_HORSE, CARD_SUIT_SPADE, CARD_POINT_KING},
  {CARD_TYPE_YELLOWTHUNDER_HORSE, CARD_SUIT_HEART, CARD_POINT_FIVE}
};

const CardInfo WarfareCards[] = 
{
  {CARD_TYPE_WINE, CARD_SUIT_CLUB, CARD_POINT_NINE},
  {CARD_TYPE_WINE, CARD_SUIT_SPADE, CARD_POINT_THREE},
  {CARD_TYPE_WINE, CARD_SUIT_SPADE, CARD_POINT_NINE},
  {CARD_TYPE_WINE, CARD_SUIT_DIAMOND, CARD_POINT_THREE},
  {CARD_TYPE_WINE, CARD_SUIT_DIAMOND, CARD_POINT_NINE},
  {CARD_TYPE_FIRE_SLASH, CARD_SUIT_CLUB, CARD_POINT_FOUR},
  {CARD_TYPE_FIRE_SLASH, CARD_SUIT_CLUB, CARD_POINT_FIVE},
  {CARD_TYPE_FIRE_SLASH, CARD_SUIT_HEART, CARD_POINT_FOUR},
  {CARD_TYPE_FIRE_SLASH, CARD_SUIT_HEART, CARD_POINT_SEVEN},
  {CARD_TYPE_FIRE_SLASH, CARD_SUIT_HEART, CARD_POINT_TEN},
  {CARD_TYPE_THUNDER_SLASH, CARD_SUIT_SPADE, CARD_POINT_FOUR},
  {CARD_TYPE_THUNDER_SLASH, CARD_SUIT_SPADE, CARD_POINT_FIVE},
  {CARD_TYPE_THUNDER_SLASH, CARD_SUIT_SPADE, CARD_POINT_SIX},
  {CARD_TYPE_THUNDER_SLASH, CARD_SUIT_SPADE, CARD_POINT_SEVEN},
  {CARD_TYPE_THUNDER_SLASH, CARD_SUIT_SPADE, CARD_POINT_EIGHT},
  {CARD_TYPE_THUNDER_SLASH, CARD_SUIT_DIAMOND, CARD_POINT_FIVE},
  {CARD_TYPE_THUNDER_SLASH, CARD_SUIT_DIAMOND, CARD_POINT_SIX},
  {CARD_TYPE_THUNDER_SLASH, CARD_SUIT_DIAMOND, CARD_POINT_SEVEN},
  {CARD_TYPE_THUNDER_SLASH, CARD_SUIT_DIAMOND, CARD_POINT_EIGHT},
  {CARD_TYPE_JINK, CARD_SUIT_CLUB, CARD_POINT_SIX},
  {CARD_TYPE_JINK, CARD_SUIT_CLUB, CARD_POINT_SEVEN},
  {CARD_TYPE_JINK, CARD_SUIT_CLUB, CARD_POINT_EIGHT},
  {CARD_TYPE_JINK, CARD_SUIT_CLUB, CARD_POINT_TEN},
  {CARD_TYPE_JINK, CARD_SUIT_CLUB, CARD_POINT_JACK},
  {CARD_TYPE_JINK, CARD_SUIT_HEART, CARD_POINT_EIGHT},
  {CARD_TYPE_JINK, CARD_SUIT_HEART, CARD_POINT_NINE},
  {CARD_TYPE_JINK, CARD_SUIT_HEART, CARD_POINT_JACK},
  {CARD_TYPE_JINK, CARD_SUIT_HEART, CARD_POINT_QUENE},
  {CARD_TYPE_PEACH, CARD_SUIT_CLUB, CARD_POINT_TWO},
  {CARD_TYPE_PEACH, CARD_SUIT_CLUB, CARD_POINT_THREE},
  {CARD_TYPE_PEACH, CARD_SUIT_HEART, CARD_POINT_FIVE},
  {CARD_TYPE_PEACH, CARD_SUIT_HEART, CARD_POINT_SIX},
  {CARD_TYPE_FOOD_SHORTAGE, CARD_SUIT_SPADE, CARD_POINT_TEN},
  {CARD_TYPE_FOOD_SHORTAGE, CARD_SUIT_DIAMOND, CARD_POINT_FOUR},
  {CARD_TYPE_FIRE_ATTACK, CARD_SUIT_CLUB, CARD_POINT_QUENE},
  {CARD_TYPE_FIRE_ATTACK, CARD_SUIT_HEART, CARD_POINT_TWO},
  {CARD_TYPE_FIRE_ATTACK, CARD_SUIT_HEART, CARD_POINT_THREE},
  {CARD_TYPE_CHAIN, CARD_SUIT_SPADE, CARD_POINT_JACK},
  {CARD_TYPE_CHAIN, CARD_SUIT_SPADE, CARD_POINT_QUENE},
  {CARD_TYPE_CHAIN, CARD_SUIT_DIAMOND, CARD_POINT_TEN},
  {CARD_TYPE_CHAIN, CARD_SUIT_DIAMOND, CARD_POINT_JACK},
  {CARD_TYPE_CHAIN, CARD_SUIT_DIAMOND, CARD_POINT_QUENE},
  {CARD_TYPE_CHAIN, CARD_SUIT_DIAMOND, CARD_POINT_KING},
  {CARD_TYPE_INVULNERABLE, CARD_SUIT_SPADE, CARD_POINT_KING},
  {CARD_TYPE_INVULNERABLE, CARD_SUIT_HEART, CARD_POINT_ONE},
  {CARD_TYPE_INVULNERABLE, CARD_SUIT_HEART, CARD_POINT_KING},
  {CARD_TYPE_GUDING_SWORD, CARD_SUIT_SPADE, CARD_POINT_ONE},
  {CARD_TYPE_ROSEFINCH_FAN, CARD_SUIT_CLUB, CARD_POINT_ONE},
  {CARD_TYPE_SILVER_LION, CARD_SUIT_DIAMOND, CARD_POINT_ONE},
  {CARD_TYPE_RATTAN_ARMOR, CARD_SUIT_SPADE, CARD_POINT_TWO},
  {CARD_TYPE_RATTAN_ARMOR, CARD_SUIT_DIAMOND, CARD_POINT_TWO},
  {CARD_TYPE_HUALIU_HORSE, CARD_SUIT_CLUB, CARD_POINT_KING}
};

// --------------------------------------------------------------------------

CCardHeap * CCardHeap::CreateCardHeap(int packageMask)
{
  CCardHeap *cardHeap = new CCardHeap();
  if (cardHeap != NULL)
  {
    if (cardHeap->Init(packageMask))
    {  
      return cardHeap;
    }
  }
  return NULL;
}


CCardHeap::CCardHeap(): m_CardMask(PACKAGE_STANDARD), m_AllCards(NULL), m_CardNum(0)
{
}

CCardHeap::~CCardHeap()
{
  DeInit();
}

int CCardHeap::Init(int packageMask)
{
  DeInit();
  int standardNum = sizeof(StandardCards) / sizeof(StandardCards[0]);
  int warfareNum = sizeof(WarfareCards) / sizeof(WarfareCards[0]);

  if (m_CardMask & PACKAGE_STANDARD)
  {
    m_CardNum += standardNum;
  }
  else
  {
    return 0;
  }

  if (m_CardMask & PACKAGE_WARFARE)
  {
    m_CardNum += warfareNum;
  }

  m_AllCards = new CCard[m_CardNum];
  if (m_AllCards == NULL)
  {
    return 0;
  }

  for (int i = 0; i < m_CardNum; ++i)
  {
    if (i <= standardNum)
    {
      m_AllCards[i].SetCardInfo(StandardCards[i]);
    }
    else
    {
      m_AllCards[i].SetCardInfo(WarfareCards[i - standardNum]);
    }
	m_AllCards[i].SetCardID(i);
  }
  
  return 1;
}

void CCardHeap::DeInit()
{
  m_CardNum = 0;
  m_CardMask = PACKAGE_STANDARD;
  if (m_AllCards != NULL)
    delete [] m_AllCards;
  m_AllCards = NULL;
}

void CCardHeap::Shuffle()
{
  m_CardInHeap.clear();
  
  CCard **cardIndex = new CCard*[m_CardNum];
  for (int i = 0; i < m_CardNum; ++i)
  {
    cardIndex[i] = &m_AllCards[i];
  }

  for (int i = 0; i < m_CardNum; ++i)
  {
    int swap1 = rand() % m_CardNum;
	int swap2 = rand() % m_CardNum;
	if (swap1 == swap2)
	{
	  continue;
	}
	CCard *temp = cardIndex[swap1];
	cardIndex[swap1] = cardIndex[swap2];
	cardIndex[swap2] = temp;
  }

  for (int i = 0; i < m_CardNum; ++i)
  {
    if (cardIndex[i]->GetCardState() == CARD_STATE_IN_USED || 
		cardIndex[i]->GetCardState() == CARD_STATE_IN_HEAP)
	{
	  cardIndex[i]->SetCardState(CARD_STATE_IN_HEAP);
	  m_CardInHeap.push_back(cardIndex[i]);
	}
  }

  delete [] cardIndex;
}

void CCardHeap::ShuffleAll()
{
  m_CardInHeap.clear();
  
  CCard **cardIndex = new CCard*[m_CardNum];
  for (int i = 0; i < m_CardNum; ++i)
  {
    cardIndex[i] = &m_AllCards[i];
  }

  for (int i = 0; i < m_CardNum; ++i)
  {
    int swap1 = rand() % m_CardNum;
	int swap2 = rand() % m_CardNum;
	if (swap1 == swap2)
	{
	  continue;
	}
	CCard *temp = cardIndex[swap1];
	cardIndex[swap1] = cardIndex[swap2];
	cardIndex[swap2] = temp;
  }

  for (int i = 0; i < m_CardNum; ++i)
  {
	cardIndex[i]->SetCardState(CARD_STATE_IN_HEAP);
	m_CardInHeap.push_back(cardIndex[i]);
  }

  delete [] cardIndex;
}

CCard * CCardHeap::DrawOneCard()
{
  if (m_CardInHeap.size() <= 0)
  {
    Shuffle();
  }
  
  if (m_CardInHeap.size() > 0)
  {
    list<CCard *>::iterator it = m_CardInHeap.begin();
	CCard *card = *it;
	card->SetCardState(CARD_STATE_IN_PLAYER);
    m_CardInHeap.erase(it);
	return card;
  }
  else
  {
    return NULL;
  }
}

void CCardHeap::PutOneCard(CCard *card)
{
  card->SetCardState(CARD_STATE_IN_USED);
}

int CCardHeap::DrawCards(CCard **cards, int num)
{
  if (num <= 0)
  {
    return 0;
  }

  int i = 0;
  for (i = 0; i < num; ++i)
  {
    CCard *oneCard = DrawOneCard();
	if (oneCard == NULL)
	{
	  break;
	}
	cards[i] = oneCard;
  }
  return i;
}

void CCardHeap::PutCards(CCard **cards, int num)
{
  if (num <= 0)
  {
    return;
  }
  
  for (int i = 0; i < num; ++i)
  {
    if (cards[i] != NULL)
    {
      cards[i]->SetCardState(CARD_STATE_IN_USED);
    }
  }
}

